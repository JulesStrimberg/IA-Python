import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Chargez les données à partir du fichier Excel

df = pd.read_excel('Flourishing_248_HD.xlsx')


# Standardiser les données pour mettre toutes les colonnes à la même échelle

scaler = StandardScaler()
df_scaled = scaler.fit_transform(df)

# Trouvez le nombre optimal de clusters à l'aide de la méthode Elbow

wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)
    kmeans.fit(df_scaled)
    wcss.append(kmeans.inertia_)
plt.plot(range(1, 11), wcss)
plt.title('Méthode du coude')
plt.xlabel('Nombre de clusters')
plt.ylabel('WCSS')
plt.show()

# Exécutez l'algorithme de clustering KMeans
kmeans = KMeans(n_clusters=4, init='k-means++', max_iter=300, n_init=10, random_state=0)
pred_y = kmeans.fit_predict(df_scaled)

# Affichez les clusters finaux
plt.scatter(df_scaled[:,0], df_scaled[:,1])
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red')
plt.title('Clusters')
plt.xlabel('Variable 1')
plt.ylabel('Variable 2')
plt.show()
